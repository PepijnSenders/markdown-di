name: Release and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Determine version bump
        id: version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == major/* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == minor/* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == patch/* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            # Default to patch for branches without prefix
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

          echo "Version bump type: $(cat $GITHUB_OUTPUT)"

      - name: Bump version
        id: bump
        run: |
          cd packages/core
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case "${{ steps.version.outputs.bump }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json
          node -e "const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"

      - name: Update CHANGELOG
        run: |
          NEW_VERSION="${{ steps.bump.outputs.version }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          cat > /tmp/new_entry.md << EOF
          ## [$NEW_VERSION] - $DATE

          ### Changed
          - $PR_TITLE ([#$PR_NUMBER]($PR_URL)) by @$AUTHOR

          EOF

          # Insert after the header section (after line 7 based on current CHANGELOG)
          if [ -f CHANGELOG.md ]; then
            head -n 7 CHANGELOG.md > /tmp/changelog_new.md
            echo "" >> /tmp/changelog_new.md
            cat /tmp/new_entry.md >> /tmp/changelog_new.md
            tail -n +8 CHANGELOG.md >> /tmp/changelog_new.md
            mv /tmp/changelog_new.md CHANGELOG.md
          else
            cat > CHANGELOG.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          EOF
            cat /tmp/new_entry.md >> CHANGELOG.md
          fi

      - name: Build packages
        run: bun run build

      - name: Commit version bump and changelog
        run: |
          git add packages/core/package.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.bump.outputs.version }}"
          git push origin main

      - name: Create and push tag
        run: |
          git tag "v${{ steps.bump.outputs.version }}" -m "Release v${{ steps.bump.outputs.version }}"
          git push origin "v${{ steps.bump.outputs.version }}"

      - name: Setup npm authentication
        run: |
          # Create .npmrc in home directory with proper npm config
          cat > ~/.npmrc << EOF
          //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          registry=https://registry.npmjs.org/
          always-auth=true
          EOF

      - name: Publish to npm
        working-directory: ./packages/core
        run: |
          # Verify npm auth works
          npm whoami
          # Publish with bun
          bun publish --access public

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          release_name: Release v${{ steps.bump.outputs.version }}
          body: |
            ${{ github.event.pull_request.title }}

            **Changes**: ${{ github.event.pull_request.html_url }}
            **Author**: @${{ github.event.pull_request.user.login }}
          draft: false
          prerelease: false
