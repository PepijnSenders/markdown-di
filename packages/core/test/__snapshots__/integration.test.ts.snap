// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`MarkdownDI - Core Integration Tests Basic Processing processes simple partial references with shorthand syntax 1`] = `
"---
name: test-document
description: A test document
partials:
  intro: sections/intro.md
---

# My Document

# Introduction

This is the introduction section with some content.
"
`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes simple partial references with shorthand syntax 2`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes partial references with explicit syntax 1`] = `
"---
name: explicit-syntax-doc
description: Document using explicit partial syntax
partials:
  intro: sections/intro.md
  conclusion: sections/conclusion.md
---

# My Document

# Introduction

This is the introduction section with some content.

## Middle Section

Some content here.

# Conclusion

This wraps up the document nicely.
"
`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes partial references with explicit syntax 2`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes multiple partial references 1`] = `
"---
name: multi-section-doc
description: Document with multiple sections
partials:
  intro: sections/intro.md
  conclusion: sections/conclusion.md
---

# Complete Document

# Introduction

This is the introduction section with some content.

## Middle Section

Some content in the middle.

# Conclusion

This wraps up the document nicely.
"
`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes multiple partial references 2`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes partial arrays with wildcards 1`] = `
"---
name: guide-collection
description: Collection of all guides
partials:
  - guides/*.md
---

# All Guides


"
`;

exports[`MarkdownDI - Core Integration Tests Basic Processing processes mixed partial and reference dependencies 1`] = `
"---
name: mixed-document
description: Document with both partials
partials:
  intro: sections/intro.md
  guides:
    - guides/getting-started.md
    - guides/advanced.md
---

# Mixed Content Document

# Introduction

This is the introduction section with some content.

## Related Guides

## Getting Started Guide

Step 1: Install the package
Step 2: Configure it
Step 3: Use it

## Advanced Usage

This covers advanced topics and patterns.
"
`;

exports[`MarkdownDI - Core Integration Tests Validation validates and catches missing frontmatter fields 1`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Validation validates and catches undefined references 1`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Validation validates reference syntax 1`] = `
[
  {
    "location": "line 5, column 0",
    "message": "Invalid characters in partial reference: "invalid{nested"",
    "type": "syntax",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Validation validates partial structure 1`] = `
[
  {
    "location": "partials.0",
    "message": "Partial file not found: this-should-be-an-object",
    "type": "file",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Validation validates reference structure 1`] = `
[
  {
    "location": "partials.guides",
    "message": "Partial file not found: should-be-an-array",
    "type": "file",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Schema Validation validates with registered schema 1`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Schema Validation catches schema validation errors 1`] = `
[
  {
    "location": "version",
    "message": "Invalid input: expected string, received undefined",
    "type": "schema",
  },
  {
    "location": "count",
    "message": "Invalid input: expected number, received undefined",
    "type": "schema",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Schema Validation registers and uses named schemas 1`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Schema Validation catches errors for unregistered schema references 1`] = `
[
  {
    "location": "frontmatter.schema",
    "message": "Schema "nonexistent-schema" not found in registry. Register it with registerSchema() first.",
    "type": "schema",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Dependency Resolution resolves dependencies from frontmatter 1`] = `
[
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/intro.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/conclusion.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/advanced.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/getting-started.md",
]
`;

exports[`MarkdownDI - Core Integration Tests Dependency Resolution includes all resolved files in dependencies 1`] = `
[
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/intro.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/conclusion.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/getting-started.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/advanced.md",
]
`;

exports[`MarkdownDI - Core Integration Tests Error Handling handles missing files gracefully 1`] = `
[
  {
    "location": "partials.missing",
    "message": "Partial file not found: sections/does-not-exist.md",
    "type": "file",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Error Handling handles malformed frontmatter 1`] = `
[
  {
    "location": "document start",
    "message": 
"Failed to extract frontmatter: YAMLParseError: Nested mappings are not allowed in compact mappings at line 2, column 14:

this is not: valid: yaml: at: all
             ^
"
,
    "type": "frontmatter",
  },
  {
    "location": "document",
    "message": 
"Failed to reassemble document: YAMLException: incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 2, column 19:
    this is not: valid: yaml: at: all
                      ^"
,
    "type": "frontmatter",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Error Handling handles empty frontmatter 1`] = `
[
  {
    "location": "document start",
    "message": "No frontmatter found in document",
    "type": "frontmatter",
  },
]
`;

exports[`MarkdownDI - Core Integration Tests Complex Scenarios processes document with all features combined 1`] = `
"---
name: complete-example
description: Complete example with all features
partials:
  intro: sections/intro.md
  conclusion: sections/conclusion.md
  guides:
    - guides/getting-started.md
    - guides/advanced.md
---

# Complete Documentation

## Introduction

# Introduction

This is the introduction section with some content.

## Main Content

This is custom content written directly in the document.

### Examples and Guides

Here are some related guides:

## Getting Started Guide

Step 1: Install the package
Step 2: Configure it
Step 3: Use it

## Advanced Usage

This covers advanced topics and patterns.

## Conclusion

# Conclusion

This wraps up the document nicely.
"
`;

exports[`MarkdownDI - Core Integration Tests Complex Scenarios processes document with all features combined 2`] = `[]`;

exports[`MarkdownDI - Core Integration Tests Complex Scenarios processes document with all features combined 3`] = `
[
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/intro.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/sections/conclusion.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/getting-started.md",
  "/Users/ps/Documents/GitHub/markdown-di/packages/test-fixtures/guides/advanced.md",
]
`;

exports[`MarkdownDI - Core Integration Tests Complex Scenarios processes document with all features combined 4`] = `
{
  "description": "Complete example with all features",
  "name": "complete-example",
  "partials": {
    "conclusion": "sections/conclusion.md",
    "guides": [
      "guides/getting-started.md",
      "guides/advanced.md",
    ],
    "intro": "sections/intro.md",
  },
}
`;

exports[`MarkdownDI - Core Integration Tests Complex Scenarios preserves formatting and whitespace 1`] = `
"---
name: formatting-test
description: Test formatting preservation
partials:
  intro: sections/intro.md
---

# Document

First paragraph.

# Introduction

This is the introduction section with some content.

   Indented content here.

- List item 1
- List item 2
"
`;
